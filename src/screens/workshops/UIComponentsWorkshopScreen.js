import React, { useState } from 'react';
import { ScrollView, Alert } from 'react-native';
import {
  Box,
  Text,
  VStack,
  HStack,
  Pressable,
  Icon,
  useColorModeValue,
  Badge,
  Input,
  Button,
  Card,
  Heading,
  Divider,
  Avatar,
  Progress,
  Switch,
  Slider,
  Select,
  CheckIcon,
  TextArea,
  ScrollView as NBScrollView,
} from 'native-base';
import { MaterialIcons } from '@expo/vector-icons';

const UIComponentsWorkshopScreen = ({ navigation }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [switchValue, setSwitchValue] = useState(false);
  const [sliderValue, setSliderValue] = useState(50);
  const [selectedValue, setSelectedValue] = useState('');
  const [textAreaValue, setTextAreaValue] = useState('');
  
  const bgColor = useColorModeValue('white', 'gray.800');
  const cardBgColor = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.800', 'white');
  const subtitleColor = useColorModeValue('gray.600', 'gray.300');
  
  const workshopSteps = [
    {
      id: 'nativebase-components',
      title: 'NativeBase Components: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
      content: [
        {
          subtitle: 'NativeBase ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
          description: 'NativeBase ‡πÄ‡∏õ‡πá‡∏ô UI component library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Native ‡∏ó‡∏µ‡πà‡∏°‡∏µ components ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢',
          details: [
            'üé® ‡∏°‡∏µ Components ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢',
            'üåô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dark/Light Mode',
            'üì± Responsive ‡πÅ‡∏•‡∏∞ Cross-platform',
            '‚ö° Performance ‡∏î‡∏µ‡πÅ‡∏•‡∏∞ Bundle size ‡πÄ‡∏•‡πá‡∏Å',
            'üîß Customizable ‡πÅ‡∏•‡∏∞ Extensible'
          ]
        },
        {
          subtitle: 'Layout Components',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Layout Components ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          code: `// Box - Container component
<Box bg="white" p={4} rounded="lg" shadow={2}>
  <Text>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô</Text>
</Box>

// VStack - Vertical Stack
<VStack space={4}>
  <Text>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 1</Text>
  <Text>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 2</Text>
  <Text>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 3</Text>
</VStack>

// HStack - Horizontal Stack
<HStack space={4} alignItems="center">
  <Icon name="star" />
  <Text>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</Text>
  <Button>‡∏õ‡∏∏‡πà‡∏°</Button>
</HStack>`
        },
        {
          subtitle: 'Text ‡πÅ‡∏•‡∏∞ Typography',
          description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ Typography',
          code: `// Text components
<Text fontSize="xs">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å</Text>
<Text fontSize="sm">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å</Text>
<Text fontSize="md">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á</Text>
<Text fontSize="lg">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà</Text>
<Text fontSize="xl">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å</Text>
<Text fontSize="2xl">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å</Text>

// Heading components
<Heading size="xs">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å</Heading>
<Heading size="sm">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å</Heading>
<Heading size="md">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á</Heading>
<Heading size="lg">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà</Heading>
<Heading size="xl">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å</Heading>`
        }
      ]
    },
    {
      id: 'form-components',
      title: 'Form Components: ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°',
      content: [
        {
          subtitle: 'Input Components',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Input components ‡∏ï‡πà‡∏≤‡∏á‡πÜ',
          form: true
        },
        {
          subtitle: 'Button Components',
          description: '‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô NativeBase',
          code: `// Button variants
<Button colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏Å‡∏ï‡∏¥</Button>
<Button variant="outline" colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏ö</Button>
<Button variant="ghost" colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™</Button>
<Button variant="link" colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå</Button>

// Button sizes
<Button size="xs">‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å</Button>
<Button size="sm">‡πÄ‡∏•‡πá‡∏Å</Button>
<Button size="md">‡∏Å‡∏•‡∏≤‡∏á</Button>
<Button size="lg">‡πÉ‡∏´‡∏ç‡πà</Button>`
        },
        {
          subtitle: 'Interactive Components',
          description: 'Components ‡∏ó‡∏µ‡πà‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ',
          code: `// Switch
<Switch value={isEnabled} onToggle={setIsEnabled} />

// Slider
<Slider value={value} onChange={setValue} />

// Select
<Select
  selectedValue={selectedValue}
  onValueChange={setSelectedValue}
  placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
>
  <Select.Item label="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1" value="1" />
  <Select.Item label="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2" value="2" />
  <Select.Item label="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3" value="3" />
</Select>`
        }
      ]
    },
    {
      id: 'custom-components',
      title: 'Custom Components: ‡∏™‡∏£‡πâ‡∏≤‡∏á Components ‡πÄ‡∏≠‡∏á',
      content: [
        {
          subtitle: '‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Card Component',
          description: '‡∏™‡∏£‡πâ‡∏≤‡∏á Card component ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢',
          code: `// CustomCard.js
import React from 'react';
import { Box, Text, VStack, HStack, Avatar, Badge } from 'native-base';

const CustomCard = ({ 
  title, 
  subtitle, 
  description, 
  imageUrl, 
  tags = [], 
  onPress 
}) => {
  return (
    <Box
      bg="white"
      p={4}
      rounded="lg"
      shadow={2}
      borderWidth={1}
      borderColor="gray.200"
      mb={4}
    >
      <HStack space={4} alignItems="center">
        <Avatar
          size="md"
          source={{ uri: imageUrl }}
          fallbackText={title.charAt(0)}
        />
        
        <VStack flex={1} space={1}>
          <Text fontSize="lg" fontWeight="bold">
            {title}
          </Text>
          <Text fontSize="sm" color="gray.600">
            {subtitle}
          </Text>
          <Text fontSize="xs" color="gray.500" numberOfLines={2}>
            {description}
          </Text>
          
          {tags.length > 0 && (
            <HStack space={2} mt={2}>
              {tags.map((tag, index) => (
                <Badge key={index} colorScheme="blue" variant="subtle">
                  {tag}
                </Badge>
              ))}
            </HStack>
          )}
        </VStack>
      </HStack>
    </Box>
  );
};

export default CustomCard;`
        },
        {
          subtitle: '‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Button Component',
          description: '‡∏™‡∏£‡πâ‡∏≤‡∏á Button component ‡∏ó‡∏µ‡πà‡∏°‡∏µ style ‡πÄ‡∏â‡∏û‡∏≤‡∏∞',
          code: `// CustomButton.js
import React from 'react';
import { Button, HStack, Icon, Text } from 'native-base';
import { MaterialIcons } from '@expo/vector-icons';

const CustomButton = ({ 
  title, 
  icon, 
  variant = 'solid', 
  colorScheme = 'blue',
  onPress,
  ...props 
}) => {
  return (
    <Button
      variant={variant}
      colorScheme={colorScheme}
      onPress={onPress}
      {...props}
    >
      <HStack space={2} alignItems="center">
        {icon && <Icon as={MaterialIcons} name={icon} size="sm" />}
        <Text fontWeight="bold">{title}</Text>
      </HStack>
    </Button>
  );
};

export default CustomButton;`
        }
      ]
    },
    {
      id: 'styling-theme',
      title: 'Styling ‡πÅ‡∏•‡∏∞ Theme: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Theme',
      content: [
        {
          subtitle: 'Color Mode',
          description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Dark/Light Mode',
          code: `// ‡πÉ‡∏ä‡πâ useColorModeValue
const bgColor = useColorModeValue('white', 'gray.800');
const textColor = useColorModeValue('gray.800', 'white');

// ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Component
<Box bg={bgColor}>
  <Text color={textColor}>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</Text>
</Box>

// Toggle Color Mode
import { useColorMode } from 'native-base';

const MyComponent = () => {
  const { colorMode, toggleColorMode } = useColorMode();
  
  return (
    <Button onPress={toggleColorMode}>
      {colorMode === 'light' ? 'üåô' : '‚òÄÔ∏è'} 
      {colorMode === 'light' ? 'Dark Mode' : 'Light Mode'}
    </Button>
  );
};`
        },
        {
          subtitle: 'Custom Theme',
          description: '‡∏™‡∏£‡πâ‡∏≤‡∏á Theme ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ',
          code: `// theme.js
import { extendTheme } from 'native-base';

const customTheme = extendTheme({
  colors: {
    primary: {
      50: '#E3F2FD',
      100: '#BBDEFB',
      500: '#2196F3',
      600: '#1E88E5',
      700: '#1976D2',
      900: '#0D47A1',
    },
    secondary: {
      50: '#F3E5F5',
      100: '#E1BEE7',
      500: '#9C27B0',
      600: '#8E24AA',
      700: '#7B1FA2',
      900: '#4A148C',
    }
  },
  fonts: {
    heading: 'Roboto-Bold',
    body: 'Roboto-Regular',
  },
  components: {
    Button: {
      defaultProps: {
        colorScheme: 'primary',
      },
    },
    Text: {
      defaultProps: {
        fontFamily: 'body',
      },
    },
  },
});

export default customTheme;`
        }
      ]
    }
  ];

  const renderStep = (step) => {
    return (
      <VStack space={4}>
        {step.content.map((item, index) => (
          <Box
            key={index}
            bg={cardBgColor}
            p={4}
            rounded="lg"
            shadow={2}
            borderWidth={1}
            borderColor={useColorModeValue('gray.200', 'gray.600')}
          >
            <VStack space={3}>
              <Text fontSize="lg" fontWeight="bold" color={textColor}>
                {item.subtitle}
              </Text>
              <Text fontSize="sm" color={subtitleColor}>
                {item.description}
              </Text>
              
              {item.details && (
                <VStack space={2}>
                  {item.details.map((detail, detailIndex) => (
                    <Text key={detailIndex} fontSize="sm" color={textColor}>
                      {detail}
                    </Text>
                  ))}
                </VStack>
              )}
              
              {item.code && (
                <Box
                  bg={useColorModeValue('gray.100', 'gray.600')}
                  p={3}
                  rounded="md"
                >
                  <Text fontSize="xs" fontFamily="monospace" color={textColor}>
                    {item.code}
                  </Text>
                </Box>
              )}
              
              {item.form && (
                <VStack space={4}>
                  <Text fontSize="md" fontWeight="bold" color={textColor}>
                    ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Form Components
                  </Text>
                  
                  {/* Input Examples */}
                  <VStack space={3}>
                    <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" />
                    <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" type="password" />
                    <TextArea placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß" />
                  </VStack>
                  
                  {/* Interactive Components */}
                  <VStack space={4}>
                    <HStack space={4} alignItems="center">
                      <Text fontSize="sm">Switch:</Text>
                      <Switch value={switchValue} onToggle={setSwitchValue} />
                    </HStack>
                    
                    <VStack space={2}>
                      <Text fontSize="sm">Slider: {sliderValue}%</Text>
                      <Slider value={sliderValue} onChange={setSliderValue} />
                    </VStack>
                    
                    <Select
                      selectedValue={selectedValue}
                      onValueChange={setSelectedValue}
                      placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
                    >
                      <Select.Item label="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1" value="1" />
                      <Select.Item label="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2" value="2" />
                      <Select.Item label="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3" value="3" />
                    </Select>
                  </VStack>
                  
                  {/* Button Examples */}
                  <VStack space={3}>
                    <Button colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏Å‡∏ï‡∏¥</Button>
                    <Button variant="outline" colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏ö</Button>
                    <Button variant="ghost" colorScheme="blue">‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™</Button>
                  </VStack>
                  
                  {/* Card Example */}
                  <Card>
                    <Card.Header>
                      <Heading size="md">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î</Heading>
                    </Card.Header>
                    <Card.Body>
                      <Text>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ NativeBase</Text>
                    </Card.Body>
                    <Card.Footer>
                      <Button colorScheme="blue">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</Button>
                    </Card.Footer>
                  </Card>
                </VStack>
              )}
            </VStack>
          </Box>
        ))}
      </VStack>
    );
  };

  return (
    <ScrollView style={{ flex: 1, backgroundColor: bgColor }}>
      <Box safeArea p={4}>
        {/* Header */}
        <VStack space={4} mb={6}>
          <HStack space={4} alignItems="center">
            <Pressable onPress={() => navigation.goBack()}>
              <Icon
                as={MaterialIcons}
                name="arrow-back"
                size="md"
                color={textColor}
              />
            </Pressable>
            <VStack flex={1}>
              <Text fontSize="2xl" fontWeight="bold" color={textColor}>
                UI Components Workshop
              </Text>
              <Text fontSize="md" color={subtitleColor}>
                ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ NativeBase Components ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Components
              </Text>
            </VStack>
          </HStack>
        </VStack>

        {/* Step Navigation */}
        <HStack space={2} mb={6} flexWrap="wrap">
          {workshopSteps.map((step, index) => (
            <Pressable
              key={step.id}
              onPress={() => setCurrentStep(index)}
              _pressed={{ opacity: 0.7 }}
            >
              <Badge
                colorScheme={currentStep === index ? 'purple' : 'gray'}
                variant={currentStep === index ? 'solid' : 'outline'}
                rounded="full"
                px={3}
                py={2}
                mb={2}
              >
                <Text fontSize="sm" color={currentStep === index ? 'white' : textColor}>
                  {index + 1}. {step.title.split(':')[0]}
                </Text>
              </Badge>
            </Pressable>
          ))}
        </HStack>

        {/* Current Step Content */}
        {renderStep(workshopSteps[currentStep])}

        {/* Navigation Buttons */}
        <HStack space={4} mt={6} justifyContent="space-between">
          <Pressable
            onPress={() => setCurrentStep(Math.max(0, currentStep - 1))}
            disabled={currentStep === 0}
            bg={currentStep === 0 ? 'gray.400' : 'blue.500'}
            px={6}
            py={3}
            rounded="md"
            _pressed={{ opacity: 0.7 }}
          >
            <Text color="white" fontWeight="bold">
              ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Text>
          </Pressable>

          <Pressable
            onPress={() => setCurrentStep(Math.min(workshopSteps.length - 1, currentStep + 1))}
            disabled={currentStep === workshopSteps.length - 1}
            bg={currentStep === workshopSteps.length - 1 ? 'gray.400' : 'green.500'}
            px={6}
            py={3}
            rounded="md"
            _pressed={{ opacity: 0.7 }}
          >
            <Text color="white" fontWeight="bold">
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            </Text>
          </Pressable>
        </HStack>

        {/* Key Points */}
        <Box mt={8} p={4} bg={cardBgColor} rounded="lg">
          <VStack space={3}>
            <Text fontSize="lg" fontWeight="bold" color={textColor}>
              üé® ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥
            </Text>
            <VStack space={2}>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ NativeBase ‡∏°‡∏µ Components ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡πÉ‡∏ä‡πâ Layout Components (Box, VStack, HStack) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Components ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡πÉ‡∏ä‡πâ useColorModeValue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dark/Light Mode
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Theme ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
              </Text>
            </VStack>
          </VStack>
        </Box>
      </Box>
    </ScrollView>
  );
};

export default UIComponentsWorkshopScreen; 