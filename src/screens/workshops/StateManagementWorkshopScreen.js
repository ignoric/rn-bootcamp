import React, { useState, useReducer } from 'react';
import { ScrollView, Alert } from 'react-native';
import {
  Box,
  Text,
  VStack,
  HStack,
  Pressable,
  Icon,
  useColorModeValue,
  Badge,
  Button,
  Card,
  Heading,
  Divider,
  Input,
  Checkbox,
} from 'native-base';
import { MaterialIcons } from '@expo/vector-icons';

const StateManagementWorkshopScreen = ({ navigation }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [localCounter, setLocalCounter] = useState(0);
  const [todoText, setTodoText] = useState('');
  
  // useReducer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Todo App
  const todoReducer = (state, action) => {
    switch (action.type) {
      case 'ADD_TODO':
        return [...state, {
          id: Date.now(),
          text: action.payload,
          completed: false
        }];
      case 'TOGGLE_TODO':
        return state.map(todo =>
          todo.id === action.payload
            ? { ...todo, completed: !todo.completed }
            : todo
        );
      case 'DELETE_TODO':
        return state.filter(todo => todo.id !== action.payload);
      default:
        return state;
    }
  };

  const [todos, dispatch] = useReducer(todoReducer, []);
  
  const bgColor = useColorModeValue('white', 'gray.800');
  const cardBgColor = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.800', 'white');
  const subtitleColor = useColorModeValue('gray.600', 'gray.300');
  
  const workshopSteps = [
    {
      id: 'state-basics',
      title: 'State Basics: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô State Management',
      content: [
        {
          subtitle: 'State ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
          description: 'State ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô Component',
          details: [
            'üìä State = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ',
            'üîÑ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ State ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Component ‡∏à‡∏∞ re-render',
            'üéØ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô Component',
            '‚ö° useState ‡πÄ‡∏õ‡πá‡∏ô Hook ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State',
            'üß© State ‡πÄ‡∏õ‡πá‡∏ô Local ‡∏ï‡πà‡∏≠ Component ‡∏ô‡∏±‡πâ‡∏ô‡πÜ'
          ]
        },
        {
          subtitle: 'useState Hook',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useState ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State',
          code: `// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useState
import React, { useState } from 'react';

const CounterComponent = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [isActive, setIsActive] = useState(false);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  return (
    <View>
      <Text>Count: {count}</Text>
      <Button onPress={increment}>‡πÄ‡∏û‡∏¥‡πà‡∏°</Button>
      <Button onPress={decrement}>‡∏•‡∏î</Button>
      
      <Input
        value={name}
        onChangeText={setName}
        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"
      />
      
      <Switch
        value={isActive}
        onToggle={setIsActive}
      />
    </View>
  );
};`
        },
        {
          subtitle: 'State vs Props',
          description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á State ‡πÅ‡∏•‡∏∞ Props',
          details: [
            'üì¶ Props: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å Parent ‡πÑ‡∏õ Child (Read-only)',
            'üìä State: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Component (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ)',
            'üîÑ Props ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Parent ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà',
            '‚ö° State ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState function',
            'üéØ ‡πÉ‡∏ä‡πâ Props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Components',
            ' ‡πÉ‡∏ä‡πâ State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Component'
          ]
        }
      ]
    },
    {
      id: 'local-vs-global',
      title: 'Local vs Global State',
      content: [
        {
          subtitle: 'Local State',
          description: 'State ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Component ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
          code: `// Local State - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Component ‡∏ô‡∏µ‡πâ
const UserProfile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [tempName, setTempName] = useState('');

  const handleEdit = () => {
    setIsEditing(true);
    setTempName(user.name);
  };

  const handleSave = () => {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    setIsEditing(false);
  };

  return (
    <View>
      {isEditing ? (
        <Input
          value={tempName}
          onChangeText={setTempName}
        />
      ) : (
        <Text>{user.name}</Text>
      )}
      <Button onPress={isEditing ? handleSave : handleEdit}>
        {isEditing ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}
      </Button>
    </View>
  );
};`
        },
        {
          subtitle: 'Global State',
          description: 'State ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ Components',
          code: `// Global State ‡∏î‡πâ‡∏ß‡∏¢ Context API
// UserContext.js
import React, { createContext, useContext, useState } from 'react';

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  const login = (userData) => {
    setUser(userData);
    setIsLoggedIn(true);
  };

  const logout = () => {
    setUser(null);
    setIsLoggedIn(false);
  };

  return (
    <UserContext.Provider value={{
      user,
      isLoggedIn,
      login,
      logout
    }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser must be used within UserProvider');
  }
  return context;
};

// ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Component ‡πÉ‡∏î‡πÜ
const ProfileScreen = () => {
  const { user, logout } = useUser();
  
  return (
    <View>
      <Text>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {user.name}</Text>
      <Button onPress={logout}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</Button>
    </View>
  );
};`
        }
      ]
    },
    {
      id: 'use-reducer',
      title: 'useReducer Hook',
      content: [
        {
          subtitle: 'useReducer ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
          description: 'useReducer ‡πÄ‡∏õ‡πá‡∏ô Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô',
          details: [
            'üîÑ useReducer = useState + reducer function',
            'üìä ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State ‡∏ó‡∏µ‡πà‡∏°‡∏µ logic ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô',
            'üéØ ‡πÉ‡∏ä‡πâ pattern ‡πÅ‡∏ö‡∏ö Redux (Action -> Reducer -> State)',
            '‚ö° ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ useState ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß',
            'üß© ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ properties'
          ]
        },
        {
          subtitle: '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Reducer',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô useReducer',
          code: `// Reducer Function
const todoReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      return [...state, {
        id: Date.now(),
        text: action.payload,
        completed: false
      }];
    
    case 'TOGGLE_TODO':
      return state.map(todo =>
        todo.id === action.payload
          ? { ...todo, completed: !todo.completed }
          : todo
      );
    
    case 'DELETE_TODO':
      return state.filter(todo => todo.id !== action.payload);
    
    case 'CLEAR_COMPLETED':
      return state.filter(todo => !todo.completed);
    
    default:
      return state;
  }
};

// ‡πÉ‡∏ä‡πâ useReducer
const TodoApp = () => {
  const [todos, dispatch] = useReducer(todoReducer, []);

  const addTodo = (text) => {
    dispatch({ type: 'ADD_TODO', payload: text });
  };

  const toggleTodo = (id) => {
    dispatch({ type: 'TOGGLE_TODO', payload: id });
  };

  const deleteTodo = (id) => {
    dispatch({ type: 'DELETE_TODO', payload: id });
  };

  return (
    <View>
      {/* Todo List */}
    </View>
  );
};`
        }
      ]
    },
    {
      id: 'todo-practice',
      title: '‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥: ‡∏™‡∏£‡πâ‡∏≤‡∏á Todo App',
      content: [
        {
          subtitle: '‡∏™‡∏£‡πâ‡∏≤‡∏á Todo App ‡∏î‡πâ‡∏ß‡∏¢ useReducer',
          description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Todo ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ useReducer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State Management',
          form: true
        }
      ]
    }
  ];

  const renderStep = (step) => {
    return (
      <VStack space={4}>
        {step.content.map((item, index) => (
          <Box
            key={index}
            bg={cardBgColor}
            p={4}
            rounded="lg"
            shadow={2}
            borderWidth={1}
            borderColor={useColorModeValue('gray.200', 'gray.600')}
          >
            <VStack space={3}>
              <Text fontSize="lg" fontWeight="bold" color={textColor}>
                {item.subtitle}
              </Text>
              <Text fontSize="sm" color={subtitleColor}>
                {item.description}
              </Text>
              
              {item.details && (
                <VStack space={2}>
                  {item.details.map((detail, detailIndex) => (
                    <Text key={detailIndex} fontSize="sm" color={textColor}>
                      {detail}
                    </Text>
                  ))}
                </VStack>
              )}
              
              {item.code && (
                <Box
                  bg={useColorModeValue('gray.100', 'gray.600')}
                  p={3}
                  rounded="md"
                >
                  <Text fontSize="xs" fontFamily="monospace" color={textColor}>
                    {item.code}
                  </Text>
                </Box>
              )}
              
              {item.form && (
                <VStack space={4}>
                  <Text fontSize="md" fontWeight="bold" color={textColor}>
                    ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Todo App
                  </Text>
                  
                  {/* Local State Counter */}
                  <Card>
                    <Card.Header>
                      <Heading size="md">Local State Counter</Heading>
                    </Card.Header>
                    <Card.Body>
                      <VStack space={3} alignItems="center">
                        <Text fontSize="2xl" fontWeight="bold" color={textColor}>
                          {localCounter}
                        </Text>
                        <HStack space={3}>
                          <Button
                            onPress={() => setLocalCounter(localCounter - 1)}
                            colorScheme="red"
                          >
                            ‡∏•‡∏î
                          </Button>
                          <Button
                            onPress={() => setLocalCounter(localCounter + 1)}
                            colorScheme="green"
                          >
                            ‡πÄ‡∏û‡∏¥‡πà‡∏°
                          </Button>
                        </HStack>
                      </VStack>
                    </Card.Body>
                  </Card>
                  
                  {/* Todo App */}
                  <Card>
                    <Card.Header>
                      <Heading size="md">Todo App (useReducer)</Heading>
                    </Card.Header>
                    <Card.Body>
                      <VStack space={3}>
                        <HStack space={2}>
                          <Input
                            flex={1}
                            placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
                            value={todoText}
                            onChangeText={setTodoText}
                          />
                          <Button
                            onPress={() => {
                              if (todoText.trim()) {
                                dispatch({ type: 'ADD_TODO', payload: todoText.trim() });
                                setTodoText('');
                              }
                            }}
                            colorScheme="blue"
                          >
                            ‡πÄ‡∏û‡∏¥‡πà‡∏°
                          </Button>
                        </HStack>
                        
                        <VStack space={2}>
                          {todos.map(todo => (
                            <HStack
                              key={todo.id}
                              space={3}
                              alignItems="center"
                              p={2}
                              bg={useColorModeValue('gray.50', 'gray.600')}
                              rounded="md"
                            >
                              <Checkbox
                                value={todo.completed}
                                onChange={() => dispatch({ type: 'TOGGLE_TODO', payload: todo.id })}
                              />
                              <Text
                                flex={1}
                                textDecorationLine={todo.completed ? 'line-through' : 'none'}
                                color={todo.completed ? subtitleColor : textColor}
                              >
                                {todo.text}
                              </Text>
                              <Button
                                size="sm"
                                colorScheme="red"
                                onPress={() => dispatch({ type: 'DELETE_TODO', payload: todo.id })}
                              >
                                ‡∏•‡∏ö
                              </Button>
                            </HStack>
                          ))}
                        </VStack>
                        
                        {todos.length > 0 && (
                          <Button
                            onPress={() => dispatch({ type: 'CLEAR_COMPLETED' })}
                            colorScheme="orange"
                            variant="outline"
                          >
                            ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                          </Button>
                        )}
                      </VStack>
                    </Card.Body>
                  </Card>
                  
                  <Box
                    bg={useColorModeValue('blue.50', 'blue.900')}
                    p={4}
                    rounded="md"
                    borderWidth={1}
                    borderColor={useColorModeValue('blue.200', 'blue.700')}
                  >
                    <Text fontSize="md" fontWeight="bold" color={textColor} mb={2}>
                      üí° ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:
                    </Text>
                    <VStack space={1}>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ Local State ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Component ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                      </Text>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ useReducer ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                      </Text>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ Action -> Reducer -> State pattern
                      </Text>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ Context API ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Global State
                      </Text>
                    </VStack>
                  </Box>
                </VStack>
              )}
            </VStack>
          </Box>
        ))}
      </VStack>
    );
  };

  return (
    <ScrollView style={{ flex: 1, backgroundColor: bgColor }}>
      <Box safeArea p={4}>
        {/* Header */}
        <VStack space={4} mb={6}>
          <HStack space={4} alignItems="center">
            <Pressable onPress={() => navigation.goBack()}>
              <Icon
                as={MaterialIcons}
                name="arrow-back"
                size="md"
                color={textColor}
              />
            </Pressable>
            <VStack flex={1}>
              <Text fontSize="2xl" fontWeight="bold" color={textColor}>
                State Management Workshop
              </Text>
              <Text fontSize="md" color={subtitleColor}>
                ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
              </Text>
            </VStack>
          </HStack>
        </VStack>

        {/* Step Navigation */}
        <HStack space={2} mb={6} flexWrap="wrap">
          {workshopSteps.map((step, index) => (
            <Pressable
              key={step.id}
              onPress={() => setCurrentStep(index)}
              _pressed={{ opacity: 0.7 }}
            >
              <Badge
                colorScheme={currentStep === index ? 'orange' : 'gray'}
                variant={currentStep === index ? 'solid' : 'outline'}
                rounded="full"
                px={3}
                py={2}
                mb={2}
              >
                <Text fontSize="sm" color={currentStep === index ? 'white' : textColor}>
                  {index + 1}. {step.title.split(':')[0]}
                </Text>
              </Badge>
            </Pressable>
          ))}
        </HStack>

        {/* Current Step Content */}
        {renderStep(workshopSteps[currentStep])}

        {/* Navigation Buttons */}
        <HStack space={4} mt={6} justifyContent="space-between">
          <Pressable
            onPress={() => setCurrentStep(Math.max(0, currentStep - 1))}
            disabled={currentStep === 0}
            bg={currentStep === 0 ? 'gray.400' : 'blue.500'}
            px={6}
            py={3}
            rounded="md"
            _pressed={{ opacity: 0.7 }}
          >
            <Text color="white" fontWeight="bold">
              ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Text>
          </Pressable>

          <Pressable
            onPress={() => setCurrentStep(Math.min(workshopSteps.length - 1, currentStep + 1))}
            disabled={currentStep === workshopSteps.length - 1}
            bg={currentStep === workshopSteps.length - 1 ? 'gray.400' : 'green.500'}
            px={6}
            py={3}
            rounded="md"
            _pressed={{ opacity: 0.7 }}
          >
            <Text color="white" fontWeight="bold">
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            </Text>
          </Pressable>
        </HStack>

        {/* Key Points */}
        <Box mt={8} p={4} bg={cardBgColor} rounded="lg">
          <VStack space={3}>
            <Text fontSize="lg" fontWeight="bold" color={textColor}>
              üìä ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥
            </Text>
            <VStack space={2}>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ useState ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State ‡∏á‡πà‡∏≤‡∏¢‡πÜ
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ useReducer ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö State ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ Context API ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Global State
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ State ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState function
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡πÉ‡∏ä‡πâ Reducer pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logic ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
              </Text>
            </VStack>
          </VStack>
        </Box>
      </Box>
    </ScrollView>
  );
};

export default StateManagementWorkshopScreen; 