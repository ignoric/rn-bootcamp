import React, { useState, useEffect } from 'react';
import { ScrollView, Alert } from 'react-native';
import {
  Box,
  Text,
  VStack,
  HStack,
  Pressable,
  Icon,
  useColorModeValue,
  Badge,
  Button,
  Heading,
  Divider,
  Input,
  Spinner,
  FlatList,
  Avatar,
} from 'native-base';
import { MaterialIcons } from '@expo/vector-icons';

const APIIntegrationWorkshopScreen = ({ navigation, route }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  
  const bgColor = useColorModeValue('white', 'gray.800');
  const cardBgColor = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.800', 'white');
  const subtitleColor = useColorModeValue('gray.600', 'gray.300');
  // Hoisted color tokens
  const borderGray200_600 = useColorModeValue('gray.200', 'gray.600');
  const codeBgGray100_600 = useColorModeValue('gray.100', 'gray.600');
  const listItemBgGray50_600 = useColorModeValue('gray.50', 'gray.600');
  const listItemBorderGray200_500 = useColorModeValue('gray.200', 'gray.500');
  const infoBgBlue50_900 = useColorModeValue('blue.50', 'blue.900');
  const infoBorderBlue200_700 = useColorModeValue('blue.200', 'blue.700');

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ step ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å route param
  useEffect(() => {
    const openStepId = route?.params?.openStepId;
    if (openStepId) {
      const idx = workshopSteps.findIndex((s) => s.id === openStepId);
      if (idx >= 0) {
        setCurrentStep(idx);
      }
    }
  }, [route?.params?.openStepId]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const fetchUsers = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users');
      if (!response.ok) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      }
      const data = await response.json();
      setUsers(data);
    } catch (err) {
      setError(err.message);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', err.message);
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const filteredUsers = users.filter(user =>
    user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    user.email.toLowerCase().includes(searchQuery.toLowerCase())
  );
  
  const workshopSteps = [
    {
      id: 'api-basics',
      title: 'API Basics: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API',
      content: [
        {
          subtitle: 'API ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
          description: 'API (Application Programming Interface) ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
          details: [
            'üåê API = ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
            'üì° ‡πÉ‡∏ä‡πâ HTTP methods (GET, POST, PUT, DELETE)',
            'üìä ‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON',
            'üîí ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡πÅ‡∏•‡∏∞ Authorization',
            '‚ö° ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å'
          ]
        },
        {
          subtitle: 'HTTP Methods',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ HTTP methods ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö API',
          details: [
            'üìñ GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
            'üìù POST - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
            '‚úèÔ∏è PUT - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            'üîÑ PATCH - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
            'üóëÔ∏è DELETE - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå'
          ]
        },
        {
          subtitle: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Response',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ response ‡∏à‡∏≤‡∏Å API',
          code: `// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Response Status
const response = await fetch('https://api.example.com/users');

if (response.ok) {
  // Status 200-299 (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
  const data = await response.json();
  console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', data);
} else {
  // Status 400+ (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
  console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', response.status);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type
const contentType = response.headers.get('content-type');
if (contentType && contentType.includes('application/json')) {
  const data = await response.json();
} else {
  const text = await response.text();
}`
        }
      ]
    },
    {
      id: 'fetch-api',
      title: 'Fetch API: ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      content: [
        {
          subtitle: '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Fetch API',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Fetch API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
          code: `// ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
const fetchData = async () => {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
};

// ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const createPost = async (postData) => {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(postData)
    });
    const data = await response.json();
    console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
};

// ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const updatePost = async (id, updateData) => {
  try {
    const response = await fetch(\`https://jsonplaceholder.typicode.com/posts/\${id}\`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData)
    });
    const data = await response.json();
    console.log('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
};`
        },
        {
          subtitle: 'Error Handling',
          description: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API',
          code: `// Error Handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ
const fetchDataWithErrorHandling = async () => {
  try {
    setLoading(true);
    setError(null);
    
    const response = await fetch('https://api.example.com/data');
    
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    
    const data = await response.json();
    setData(data);
    
  } catch (error) {
    setError(error.message);
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    Alert.alert(
      '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    );
  } finally {
    setLoading(false);
  }
};

// Timeout handling
const fetchWithTimeout = async (url, timeout = 5000) => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, {
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    if (error.name === 'AbortError') {
      throw new Error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤');
    }
    throw error;
  }
};`
        }
      ]
    },
    {
      id: 'example-prompts',
      title: 'Example: Prompts Library',
      content: [
        {
          subtitle: '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ axios + token',
          description: '‡πÄ‡∏î‡πÇ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏≤‡∏Å Prompts Library ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ NativeBase',
          details: [
            'üîê ‡πÉ‡∏™‡πà Bearer Token ‡πÉ‡∏ô header',
            'üåê ‡πÉ‡∏ä‡πâ baseURL ‡∏à‡∏≤‡∏Å config',
            'üß≠ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á'
          ]
        },
        {
          subtitle: '‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
          description: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Prompts Library',
          actionNavigate: true
        }
      ]
    },
    {
      id: 'async-await',
      title: 'Async/Await: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Asynchronous',
      content: [
        {
          subtitle: 'Async/Await ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
          description: 'Async/Await ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Asynchronous ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Promises',
          details: [
            'üîÑ Async = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Asynchronous',
            '‚è≥ Await = ‡∏£‡∏≠‡πÉ‡∏´‡πâ Promise ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
            'üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Promises',
            'üéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ try/catch',
            '‚ö° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢'
          ]
        },
        {
          subtitle: '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Async/Await',
          description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Async/Await ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API',
          code: `// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Async ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
const fetchUserData = async (userId) => {
  try {
    const response = await fetch(\`https://api.example.com/users/\${userId}\`);
    const userData = await response.json();
    return userData;
  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    throw error;
  }
};

// ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Async
const loadUserProfile = async () => {
  try {
    setLoading(true);
    const user = await fetchUserData(1);
    setUserData(user);
  } catch (error) {
    setError(error.message);
  } finally {
    setLoading(false);
  }
};

// ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏≤‡∏¢ API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
const loadUserAndPosts = async (userId) => {
  try {
    const [userResponse, postsResponse] = await Promise.all([
      fetch(\`https://api.example.com/users/\${userId}\`),
      fetch(\`https://api.example.com/users/\${userId}/posts\`)
    ]);
    
    const user = await userResponse.json();
    const posts = await postsResponse.json();
    
    return { user, posts };
  } catch (error) {
    console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    throw error;
  }
};

// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Async ‡πÉ‡∏ô useEffect
useEffect(() => {
  const loadData = async () => {
    try {
      const data = await fetchData();
      setData(data);
    } catch (error) {
      setError(error.message);
    }
  };
  
  loadData();
}, []);`
        }
      ]
    },
    {
      id: 'api-practice',
      title: '‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API',
      content: [
        {
          subtitle: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
          description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•',
          form: true
        }
      ]
    }
  ];

  const renderStep = (step) => {
    return (
      <VStack space={4}>
        {step.id === 'fetch-api' && (
          <Pressable onPress={() => navigation.navigate('PromptsLibrary')} _pressed={{ opacity: 0.7 }}>
            <HStack space={3} alignItems="center" bg={cardBgColor} px={4} py={3} rounded="md" borderWidth={1} borderColor={borderGray200_600}>
              <Icon as={MaterialIcons} name="list" size="sm" color={textColor} />
              <VStack>
                <Text fontSize="md" fontWeight="bold" color={textColor}>‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢ 1: Prompts Library</Text>
                <Text fontSize="xs" color={subtitleColor}>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á axios + token ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏¥‡∏™‡∏ï‡πå</Text>
              </VStack>
            </HStack>
          </Pressable>
        )}
        {step.content.map((item, index) => (
          <Box
            key={index}
            bg={cardBgColor}
            p={4}
            rounded="lg"
            shadow={2}
            borderWidth={1}
            borderColor={borderGray200_600}
          >
            <VStack space={3}>
              <Text fontSize="lg" fontWeight="bold" color={textColor}>
                {item.subtitle}
              </Text>
              <Text fontSize="sm" color={subtitleColor}>
                {item.description}
              </Text>
              
              {item.details && (
                <VStack space={2}>
                  {item.details.map((detail, detailIndex) => (
                    <Text key={detailIndex} fontSize="sm" color={textColor}>
                      {detail}
                    </Text>
                  ))}
                </VStack>
              )}
              
              {item.code && (
                <Box
                  bg={codeBgGray100_600}
                  p={3}
                  rounded="md"
                >
                  <Text fontSize="xs" fontFamily="monospace" color={textColor}>
                    {item.code}
                  </Text>
                </Box>
              )}
              
              {item.form && (
                <VStack space={4}>
                  <Text fontSize="md" fontWeight="bold" color={textColor}>
                    ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
                  </Text>
                  
                  {/* API Controls */}
                  <Box bg={useColorModeValue('white','gray.700')} rounded="md" borderWidth={1} borderColor={borderGray200_600}>
                    <Box px={4} py={3} borderBottomWidth={1} borderColor={borderGray200_600}>
                      <Heading size="md">User API Demo</Heading>
                    </Box>
                    <Box px={4} py={3}>
                      <VStack space={3}>
                        <HStack space={2}>
                          <Button
                            onPress={fetchUsers}
                            colorScheme="blue"
                            isLoading={loading}
                            flex={1}
                          >
                            ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                          </Button>
                          <Button
                            onPress={() => {
                              setUsers([]);
                              setError(null);
                            }}
                            colorScheme="gray"
                            variant="outline"
                          >
                            ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          </Button>
                        </HStack>
                        
                        {error && (
                          <Box
                            bg="red.100"
                            p={3}
                            rounded="md"
                            borderWidth={1}
                            borderColor="red.300"
                          >
                            <Text color="red.800" fontSize="sm">
                              ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}
                            </Text>
                          </Box>
                        )}
                        
                        <Input
                          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ..."
                          value={searchQuery}
                          onChangeText={setSearchQuery}
                          InputLeftElement={
                            <Icon
                              as={MaterialIcons}
                              name="search"
                              size="sm"
                              color="gray.400"
                              ml={2}
                            />
                          }
                        />
                      </VStack>
                    </Box>
                  </Box>
                  
                  {/* User List */}
                  {users.length > 0 && (
                    <Box bg={useColorModeValue('white','gray.700')} rounded="md" borderWidth={1} borderColor={borderGray200_600}>
                      <Box px={4} py={3} borderBottomWidth={1} borderColor={borderGray200_600}>
                        <Heading size="md">
                          ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ({filteredUsers.length} ‡∏Ñ‡∏ô)
                        </Heading>
                      </Box>
                      <Box px={4} py={3}>
                        {loading ? (
                          <VStack space={3} alignItems="center" py={4}>
                            <Spinner size="lg" color="blue.500" />
                            <Text color={subtitleColor}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Text>
                          </VStack>
                        ) : (
                          <FlatList
                            data={filteredUsers}
                            keyExtractor={(item) => item.id.toString()}
                            renderItem={({ item }) => (
                              <Box
                                p={3}
                                mb={2}
                                bg={listItemBgGray50_600}
                                rounded="md"
                                borderWidth={1}
                                borderColor={listItemBorderGray200_500}
                              >
                                <HStack space={3} alignItems="center">
                                  <Avatar
                                    size="sm"
                                    bg="blue.500"
                                  >
                                    {item.name.charAt(0)}
                                  </Avatar>
                                  <VStack flex={1}>
                                    <Text fontSize="md" fontWeight="bold" color={textColor}>
                                      {item.name}
                                    </Text>
                                    <Text fontSize="sm" color={subtitleColor}>
                                      {item.email}
                                    </Text>
                                    <Text fontSize="xs" color={subtitleColor}>
                                      {item.company?.name}
                                    </Text>
                                  </VStack>
                                  <Badge colorScheme="blue" variant="subtle">
                                    ID: {item.id}
                                  </Badge>
                                </HStack>
                              </Box>
                            )}
                            showsVerticalScrollIndicator={false}
                          />
                        )}
                      </Box>
                    </Box>
                  )}
                  
                  <Box
                    bg={infoBgBlue50_900}
                    p={4}
                    rounded="md"
                    borderWidth={1}
                    borderColor={infoBorderBlue200_700}
                  >
                    <Text fontSize="md" fontWeight="bold" color={textColor} mb={2}>
                      üí° ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:
                    </Text>
                    <VStack space={1}>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ ‡πÉ‡∏ä‡πâ fetch() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
                      </Text>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ ‡πÉ‡∏ä‡πâ async/await ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Asynchronous
                      </Text>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏î‡πâ‡∏ß‡∏¢ try/catch
                      </Text>
                      <Text fontSize="sm" color={subtitleColor}>
                        ‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á Loading state ‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                      </Text>
                    </VStack>
                  </Box>
                </VStack>
              )}

              {item.actionNavigate && (
                <Pressable onPress={() => navigation.navigate('PromptsLibrary')} _pressed={{ opacity: 0.7 }}>
                  <HStack space={3} alignItems="center" bg={cardBgColor} px={4} py={3} rounded="md" borderWidth={1} borderColor={borderGray200_600}>
                    <Icon as={MaterialIcons} name="open-in-new" size="sm" color={textColor} />
                    <VStack>
                      <Text fontSize="md" fontWeight="bold" color={textColor}>‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Prompts Library</Text>
                      <Text fontSize="xs" color={subtitleColor}>‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏î‡πÇ‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á</Text>
                    </VStack>
                  </HStack>
                </Pressable>
              )}
            </VStack>
          </Box>
        ))}
      </VStack>
    );
  };

  return (
    <ScrollView style={{ flex: 1, backgroundColor: bgColor }}>
      <Box safeArea p={4}>
        {/* Header */}
        <VStack space={4} mb={6}>
          <HStack space={4} alignItems="center">
            <Pressable onPress={() => navigation.goBack()}>
              <Icon
                as={MaterialIcons}
                name="arrow-back"
                size="md"
                color={textColor}
              />
            </Pressable>
            <VStack flex={1}>
              <Text fontSize="2xl" fontWeight="bold" color={textColor}>
                API Integration Workshop
              </Text>
              <Text fontSize="md" color={subtitleColor}>
                ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Asynchronous
              </Text>
            </VStack>
          </HStack>
        </VStack>

        {/* Step Navigation */}
        <HStack space={2} mb={6} flexWrap="wrap">
          {workshopSteps.map((step, index) => (
            <Pressable
              key={step.id}
              onPress={() => setCurrentStep(index)}
              _pressed={{ opacity: 0.7 }}
            >
              <Badge
                colorScheme={currentStep === index ? 'cyan' : 'gray'}
                variant={currentStep === index ? 'solid' : 'outline'}
                rounded="full"
                px={3}
                py={2}
                mb={2}
              >
                <Text fontSize="sm" color={currentStep === index ? 'white' : textColor}>
                  {index + 1}. {step.title.split(':')[0]}
                </Text>
              </Badge>
            </Pressable>
          ))}
        </HStack>

        {/* Current Step Content */}
        {renderStep(workshopSteps[currentStep])}

        {/* Navigation Buttons */}
        <HStack space={4} mt={6} justifyContent="space-between">
          <Pressable
            onPress={() => setCurrentStep(Math.max(0, currentStep - 1))}
            disabled={currentStep === 0}
            bg={currentStep === 0 ? 'gray.400' : 'blue.500'}
            px={6}
            py={3}
            rounded="md"
            _pressed={{ opacity: 0.7 }}
          >
            <Text color="white" fontWeight="bold">
              ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Text>
          </Pressable>

          <Pressable
            onPress={() => setCurrentStep(Math.min(workshopSteps.length - 1, currentStep + 1))}
            disabled={currentStep === workshopSteps.length - 1}
            bg={currentStep === workshopSteps.length - 1 ? 'gray.400' : 'green.500'}
            px={6}
            py={3}
            rounded="md"
            _pressed={{ opacity: 0.7 }}
          >
            <Text color="white" fontWeight="bold">
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            </Text>
          </Pressable>
        </HStack>

        {/* Key Points */}
        <Box mt={8} p={4} bg={cardBgColor} rounded="lg">
          <VStack space={3}>
            <Text fontSize="lg" fontWeight="bold" color={textColor}>
              üåê ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥
            </Text>
            <VStack space={2}>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡πÉ‡∏ä‡πâ fetch() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡πÉ‡∏ä‡πâ async/await ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Asynchronous
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏î‡πâ‡∏ß‡∏¢ try/catch
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á Loading state ‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </Text>
              <Text fontSize="sm" color={textColor}>
                ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response.ok ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </Text>
            </VStack>
          </VStack>
        </Box>
      </Box>
    </ScrollView>
  );
};

export default APIIntegrationWorkshopScreen; 